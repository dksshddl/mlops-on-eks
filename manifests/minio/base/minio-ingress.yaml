---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
#  namespace: ml-workshop
  name: minio-ml-workshop
  labels:
    helm.sh/chart: s3-server-0.0.1
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: min
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    openshift.io/host.generated: 'true'
spec:
  host: null
  subdomain: ''
  to:
    kind: Service
    name: minio-ml-workshop
    weight: 100
  port:
    targetPort: 9000
#  tls:
#    insecureEdgeTerminationPolicy: Redirect
#    termination: edge
  wildcardPolicy: None

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-ml-workshop-ui
  labels:
    helm.sh/chart: s3-server-0.0.1
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: min
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/certificate-arn: $(ACM_ARN)
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-port: '9000'
    alb.ingress.kubernetes.io/healthcheck-path: /minio/health/ready
    alb.ingress.kubernetes.io/success-codes: '200'
spec:
  ingressClassName: mlops-ingress-class
  rules:
  - host: $(MINIO_HOST)
    http:
      paths:
      - backend:
          service:
            name: minio-ml-workshop
            port:
              number: 33933
        path: /
        pathType: ImplementationSpecific      